@model BaralhoDeCartas.Models.Interfaces.IJogoMaiorCarta
@{
	ViewData["Title"] = "Maior Carta";
	Layout = "_Layout";
}

<link rel="stylesheet" href="~/css/jogo.css" />

<div class="jogo-container">
	<h1 class="titulo-jogo">Jogo de Maior Carta</h1>

	<div class="info-baralho">		
		<div class="jogadores-contador">			
			<div class="jogadores-info">
				<p>ID do Baralho: <span class="badge bg-secondary">@Model.Baralho.BaralhoId</span></p>
				<p>Cartas Restantes: <span class="badge bg-info">@Model.Baralho.QuantidadeDeCartasRestantes</span></p>
				<p>Status: <span class="badge @(Model.Baralho.EstaEmbaralhado ? "bg-success" : "bg-warning")">
					@(Model.Baralho.EstaEmbaralhado ? "Embaralhado" : "Não Embaralhado")
				</span></p>
				<p>Número de Jogadores: <span class="badge bg-success jogadores-badge">@Model.Jogadores.Count</span></p>
				<div class="jogadores-icones">
					@for (int i = 0; i < Model.Jogadores.Count; i++)
					{
						<div class="jogador-icone @(i == 0 ? "computador" : "humano")" title="@(i == 0 ? "Computador" : $"Jogador {i}")">
							<i class="bi @(i == 0 ? "bi-cpu" : "bi-person")"></i>
						</div>
					}
				</div>
			</div>
		</div>
	</div>

	<div class="container">
		<div class="row justify-content-center">
			<div class="col-lg-12">
				<!-- Área do Computador -->
				<div class="card shadow mb-4">
					<div class="card-header bg-danger text-white">
						<h4 class="m-0"><i class="bi bi-cpu me-2"></i>Computador</h4>
					</div>
					<div class="card-body">
						<div id="computer-area" class="text-center">
							<div id="computer-cards" class="cartas-jogador">
								@if (Model.Jogadores[0].Cartas != null && Model.Jogadores[0].Cartas.Any())
								{
									foreach (var carta in Model.Jogadores[0].Cartas)
									{
										<partial name="_CartaPartial" model="carta" />
									}
								}
							</div>
							<div class="mt-2">
								<span class="badge bg-primary">Pontos: <span id="computer-score">0</span></span>
							</div>
						</div>
					</div>
				</div>

				<!-- Área dos Jogadores Humanos -->
				<div class="card shadow mb-4">
					<div class="card-header bg-primary text-white">
						<h4 class="m-0"><i class="bi bi-people me-2"></i>Jogadores</h4>
					</div>
					<div class="card-body">
						<div id="players-container" class="row">
							<!-- Jogadores serão gerados dinamicamente aqui -->
							@for (int i = 1; i < Model.Jogadores.Count; i++)
							{
								<div class="col-md-@(Model.Jogadores.Count <= 3 ? "6" : "4") mb-4">
									<div class="player-card">
										<h5 class="player-name">Jogador @i</h5>
										<div id="player-cards-@i" class="cartas-jogador" data-player-id="@i">
											@if (Model.Jogadores[i].Cartas != null && Model.Jogadores[i].Cartas.Any())
											{
												foreach (var carta in Model.Jogadores[i].Cartas)
												{
													<partial name="_CartaPartial" model="carta" />
												}
											}
										</div>
										<div class="mt-2">
											<span class="badge bg-primary">Pontos: <span id="player-score-@i">0</span></span>
										</div>
									</div>
								</div>
							}
						</div>
					</div>
				</div>

				<div class="text-center mt-4 mb-4">
					<div id="message-area" class="alert alert-info mb-4" role="alert">
						Clique em "Jogar" para começar!
					</div>
					<button id="play-button" class="btn btn-primary btn-lg">
						<i class="bi bi-play-circle me-2"></i>Jogar
					</button>
				</div>

				<div class="card mt-4 shadow">
					<div class="card-body">
						<h4 class="card-title">Regras do Jogo</h4>
						<ul class="list-group list-group-flush">
							<li class="list-group-item">Cada jogador recebe cartas aleatórias</li>
							<li class="list-group-item">A carta com o valor mais alto vence</li>
							<li class="list-group-item">Ás (A) é a carta mais alta</li>
							<li class="list-group-item">Em caso de empate, o computador vence</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const computerCards = document.getElementById('computer-cards');
			const computerScore = document.getElementById('computer-score');
			const messageArea = document.getElementById('message-area');
			const playButton = document.getElementById('play-button');
            
            // Variável para controlar se uma jogada está em andamento
            let jogadaEmAndamento = false;
            // Variável para armazenar o ID do baralho atual
            let baralhoId = '@Model.Baralho.BaralhoId';
			// Número total de jogadores
			const numeroJogadores = @Model.Jogadores.Count;
			// Mapa de pontuações dos jogadores
			const scores = {};
			
			// Inicializar pontuações
			scores['computer'] = 0;
			for (let i = 1; i < numeroJogadores; i++) {
				scores[`player-${i}`] = 0;
			}

			async function jogarRodada() {
                // Evitar múltiplos cliques simultâneos
                if (jogadaEmAndamento) {
                    return;
                }
                
                // Desabilitar o botão durante a jogada
                playButton.disabled = true;
                playButton.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Processando...';
                jogadaEmAndamento = true;

				try {
					const response = await fetch(`/JogoWeb/DistribuirCartas?baralhoId=${baralhoId}&numeroJogadores=${numeroJogadores}`, {
						method: 'GET'
					});

					const result = await response.json();

					if (!result.success) {
						throw new Error(result.error || "Erro desconhecido ao distribuir cartas");
					}
                    
                    // Se um novo baralho foi criado, atualize o ID do baralho
                    if (result.novoBaralho && result.baralhoId) {
                        baralhoId = result.baralhoId;
                        console.log('Novo baralho criado:', baralhoId);
                    }

					// Limpar áreas de cartas
					computerCards.innerHTML = '';
					for (let i = 1; i < numeroJogadores; i++) {
						document.getElementById(`player-cards-${i}`).innerHTML = '';
					}

					// Renderizar cartas para cada jogador
					for (let i = 0; i < result.data.length; i++) {
						const jogador = result.data[i];
						const areaId = i === 0 ? 'computer-cards' : `player-cards-${i}`;
						const jogadorArea = document.getElementById(areaId);
						
						for (const carta of jogador.cartas) {
							try {
								const cartaResponse = await fetch('/JogoWeb/RenderizarCarta', {
									method: 'POST',
									headers: {
										'Content-Type': 'application/json'
									},
									body: JSON.stringify({
										valor: carta.valor,
										valorSimbolico: carta.valorSimbolico,
										naipe: carta.naipe,
										imagemUrl: carta.imagem
									})
								});

								if (cartaResponse.ok) {
									const cartaHtml = await cartaResponse.text();
									jogadorArea.insertAdjacentHTML('beforeend', cartaHtml);
								} else {
									console.error(`Erro ao renderizar carta do jogador ${i}:`, await cartaResponse.text());
								}
							} catch (error) {
								console.error(`Erro ao processar carta do jogador ${i}:`, error);
							}
						}
					}

					// Determinar vencedor baseado no valor mais alto de cada jogador
					const valoresMaximos = result.data.map(jogador => 
						Math.max(...jogador.cartas.map(c => c.valor))
					);
					
					const valorMaximo = Math.max(...valoresMaximos);
					const jogadoresComValorMaximo = valoresMaximos.map((v, idx) => 
						v === valorMaximo ? idx : -1
					).filter(idx => idx !== -1);
					
					// Lógica de vitória: se houver empate, o computador vence, caso contrário o jogador com maior valor vence
					let vencedorIndex;
					if (jogadoresComValorMaximo.includes(0)) {
						// Computador está entre os que empataram com valor máximo
						vencedorIndex = 0;
						messageArea.className = 'alert alert-danger';
						messageArea.textContent = jogadoresComValorMaximo.length > 1 
							? 'Empate! Computador vence no desempate.' 
							: 'Computador venceu esta rodada!';
					} else {
						// Jogador humano venceu
						vencedorIndex = jogadoresComValorMaximo[0];
						messageArea.className = 'alert alert-success';
						messageArea.textContent = `Jogador ${vencedorIndex} venceu esta rodada!`;
					}
					
					// Atualizar pontuações
					const scoreName = vencedorIndex === 0 ? 'computer' : `player-${vencedorIndex}`;
					scores[scoreName]++;
					
					if (vencedorIndex === 0) {
						computerScore.textContent = scores[scoreName];
					} else {
						document.getElementById(`player-score-${vencedorIndex}`).textContent = scores[scoreName];
					}

				} catch (error) {
					console.error('Erro:', error);
					messageArea.className = 'alert alert-danger';
					messageArea.textContent = 'Erro ao jogar a rodada. Tente novamente.';
				} finally {
                    // Sempre reabilitar o botão após a conclusão, independentemente de sucesso ou erro
                    playButton.disabled = false;
                    playButton.innerHTML = '<i class="bi bi-play-circle me-2"></i>Jogar';
                    jogadaEmAndamento = false;
                }
			}

			playButton.addEventListener('click', jogarRodada);
		});
	</script>

	<style>
		.jogadores-contador {
			background-color: #f1f9ff;
			border-radius: 8px;
			padding: 15px;
			margin-bottom: 25px;
			box-shadow: 0 2px 5px rgba(0,0,0,0.1);
		}
		
		.jogadores-info {
			display: flex;
			flex-direction: column;
			align-items: center;
		}
		
		.jogadores-info p {
			margin-bottom: 8px;
			font-size: 1.1em;
		}

		.jogadores-badge {
			font-size: 1.2em;
			padding: 8px 12px;
			margin-left: 10px;
		}

		.jogadores-icones {
			display: flex;
			margin-top: 10px;
			gap: 15px;
			justify-content: center;
			flex-wrap: wrap;
		}

		.jogador-icone {
			width: 40px;
			height: 40px;
			border-radius: 50%;
			display: flex;
			align-items: center;
			justify-content: center;
			font-size: 1.2em;
			box-shadow: 0 2px 4px rgba(0,0,0,0.2);
			transition: transform 0.3s ease;
		}

		.jogador-icone:hover {
			transform: scale(1.1);
		}

		.jogador-icone.computador {
			background-color: #e74c3c;
			color: white;
		}

		.jogador-icone.humano {
			background-color: #3498db;
			color: white;
		}
		
		.player-card {
			border: 1px solid #e0e0e0;
			border-radius: 10px;
			padding: 15px;
			box-shadow: 0 2px 4px rgba(0,0,0,0.1);
			transition: all 0.3s ease;
		}
		
		.player-card:hover {
			box-shadow: 0 4px 8px rgba(0,0,0,0.2);
			transform: translateY(-5px);
		}
		
		.player-name {
			text-align: center;
			color: #3498db;
			margin-bottom: 15px;
			font-weight: bold;
		}
		
		.cartas-jogador {
			display: flex;
			flex-wrap: wrap;
			justify-content: center;
			gap: 5px;
			min-height: 150px;
		}
		
		/* Adaptações para dispositivos móveis */
		
	</style>
} 