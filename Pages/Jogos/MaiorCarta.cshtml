@page
@model BaralhoDeCartas.Models.Interfaces.IJogoMaiorCarta
@{
    ViewData["Title"] = "Maior Carta";
}


<div class="jogo-container">
    <h1 class="titulo-jogo">Jogo de Maior Carta</h1>

    <div class="info-baralho">
        <p>ID do Baralho: @Model.Baralho.BaralhoId</p>
        <p>Cartas Restantes: @Model.Baralho.QuantidadeDeCartasRestantes</p>
        <p>Status: @(Model.Baralho.EstaEmbaralhado ? "Embaralhado" : "Não Embaralhado")</p>
    </div>

    <div class="acoes-jogo">
        <button class="btn btn-primary btn-lg" onclick="distribuirCartas()">
            Distribuir Cartas
        </button>
    </div>

    <div id="area-jogadores" class="area-jogadores">
        <!-- Os jogadores serão inseridos aqui dinamicamente -->
    </div>
</div>

<div class="container py-5">
    <div class="row justify-content-center mb-4">
        <div class="col-lg-10 text-center">
            <h1 class="display-4 fw-bold mb-4 animate__animated animate__fadeInDown">Maior Carta</h1>
            <p class="lead text-muted animate__animated animate__fadeInUp">Teste sua sorte contra o computador!</p>
        </div>
    </div>

    <div class="row justify-content-center mb-5">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <div class="row mb-4">
                        <div class="col-md-6 text-center mb-4 mb-md-0">
                            <h3 class="mb-3">Computador</h3>
                            <div id="computer-card" class="cards-container d-flex justify-content-center"></div>
                            <div class="score-display mt-3">
                                <span>Pontos: </span>
                                <span id="computer-score">0</span>
                            </div>
                        </div>
                        <div class="col-md-6 text-center">
                            <h3 class="mb-3">Você</h3>
                            <div id="player-card" class="cards-container d-flex justify-content-center"></div>
                            <div class="score-display mt-3">
                                <span>Pontos: </span>
                                <span id="player-score">0</span>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-center mb-4">
                        <div id="game-message" class="alert alert-info text-center w-100">
                            Clique em "Jogar" para começar!
                        </div>
                    </div>

                    <div class="text-center">
                        <button id="play-btn" class="btn btn-primary btn-lg">
                            <i class="bi bi-play-circle me-2"></i>Jogar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    <h4 class="card-title mb-3">Regras do Jogo</h4>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Cada jogador recebe uma carta aleatória</li>
                        <li class="list-group-item">A carta com o valor mais alto vence</li>
                        <li class="list-group-item">Ás (A) é a carta mais alta</li>
                        <li class="list-group-item">Em caso de empate, o computador vence</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Elementos do DOM
        const computerCard = document.getElementById('computer-card');
        const playerCard = document.getElementById('player-card');
        const computerScore = document.getElementById('computer-score');
        const playerScore = document.getElementById('player-score');
        const gameMessage = document.getElementById('game-message');
        const playBtn = document.getElementById('play-btn');
        
        // Valores e naipes das cartas
        const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
        const suits = ['♣', '♦', '♥', '♠'];
        const suitColors = {
            '♣': 'black',
            '♦': 'red',
            '♥': 'red',
            '♠': 'black'
        };
        
        // Função para criar um baralho completo
        function createDeck() {
            const deck = [];
            for (let suit of suits) {
                for (let value of values) {
                    deck.push({ value, suit });
                }
            }
            return deck;
        }
        
        // Função para embaralhar o baralho
        function shuffleDeck(deck) {
            const shuffled = [...deck];
            for (let i = shuffled.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
            }
            return shuffled;
        }
        
        // Função para pegar uma carta do baralho
        function drawCard(deck) {
            return deck.pop();
        }
        
        // Função para obter o valor numérico de uma carta
        function getCardValue(value) {
            if (value === 'A') return 14;
            if (value === 'K') return 13;
            if (value === 'Q') return 12;
            if (value === 'J') return 11;
            return parseInt(value);
        }
        
        // Função para criar um elemento de carta no DOM
        function createCardElement(cardData, faceUp = true) {
            const cardElement = document.createElement('div');
            cardElement.className = 'playing-card';
            
            cardElement.innerHTML = `
                <div class="playing-card-inner">
                    <div class="playing-card-back">
                        <div class="card-pattern"></div>
                    </div>
                    <div class="playing-card-front">
                        <div class="card-content">
                            <div class="card-corner top-left">
                                <span class="card-value">${cardData.value}</span>
                                <span class="card-suit">${cardData.suit}</span>
                            </div>
                            <div class="card-center">
                                <span class="card-big-symbol">${cardData.suit}</span>
                            </div>
                            <div class="card-corner bottom-right">
                                <span class="card-value">${cardData.value}</span>
                                <span class="card-suit">${cardData.suit}</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Define a classe de cor
            const colorClass = suitColors[cardData.suit] === 'red' ? 'card-red' : 'card-black';
            const frontSide = cardElement.querySelector('.playing-card-front');
            frontSide.classList.add(colorClass);
            
            if (faceUp) {
                cardElement.classList.add('flipped');
            }
            
            return cardElement;
        }
        
        // Função para jogar uma rodada
        function playRound() {
            // Limpa as áreas de cartas
            computerCard.innerHTML = '';
            playerCard.innerHTML = '';
            
            // Cria e embaralha o baralho
            const deck = shuffleDeck(createDeck());
            
            // Distribui as cartas
            const computerCardData = drawCard(deck);
            const playerCardData = drawCard(deck);
            
            // Adiciona as cartas ao DOM
            computerCard.appendChild(createCardElement(computerCardData));
            playerCard.appendChild(createCardElement(playerCardData));
            
            // Calcula os valores das cartas
            const computerValue = getCardValue(computerCardData.value);
            const playerValue = getCardValue(playerCardData.value);
            
            // Atualiza os pontos
            let computerPoints = parseInt(computerScore.textContent);
            let playerPoints = parseInt(playerScore.textContent);
            
            // Determina o vencedor
            if (computerValue > playerValue) {
                computerPoints++;
                computerScore.textContent = computerPoints;
                gameMessage.textContent = 'Computador venceu esta rodada!';
                gameMessage.className = 'alert alert-danger text-center w-100';
                computerCard.querySelector('.card-content').classList.add('card-highlight');
            } else if (playerValue > computerValue) {
                playerPoints++;
                playerScore.textContent = playerPoints;
                gameMessage.textContent = 'Você venceu esta rodada!';
                gameMessage.className = 'alert alert-success text-center w-100';
                playerCard.querySelector('.card-content').classList.add('card-highlight');
            } else {
                computerPoints++;
                computerScore.textContent = computerPoints;
                gameMessage.textContent = 'Empate! Computador vence no desempate.';
                gameMessage.className = 'alert alert-warning text-center w-100';
                computerCard.querySelector('.card-content').classList.add('card-highlight');
            }
        }
        
        // Event listener para o botão de jogar
        playBtn.addEventListener('click', playRound);
    });
</script>
} 